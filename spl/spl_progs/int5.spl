define LTABLE 32256;                // 63rd page for LTABLE

alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currentPID S2;
currentPID = (PTBR - 1024) / 8;

alias PCBi S3;

alias childPTBR S4;
alias childPCB S5;
alias currentPCB S6;

alias currentStack S7;

alias pg_num S8;



//print "in fork";
//print currentPID;
//breakpoint;


alias i S15;

alias j S14;
j = 0;

alias flag S13;
flag = 0;

alias vpcount S12;


alias k S11;
k = 0;

alias l S10;
l = 0;


if(sysCallNo == 8) then

	i = 0;
	PCBi = -1;
	vpcount = 0;

	while(i < 32) do
		
		if( [READY_LIST + i * 32 + 1] == 0) then
		
			PCBi = i;
			break;
		endif;

	i = i + 1;
	endwhile;

	//breakpoint;


	if(PCBi == -1) then

		[physicalSP - 2] = -1;                  //no free PCB
		print "no free PCB";
		ireturn;
	endif;

	[READY_LIST + PCBi * 32] = PCBi;            // set PID of child process


	


	i = 25;
	pg_num = -1;

	while(i < 63) do

		if([MEM_LIST + i] == 0) then
			pg_num = i;
			break;		
		endif;

		i = i + 1;
	endwhile;


	if(pg_num == -1) then                          // No free page, page replacement needed

		i = PTBR;                                // set i to address of first page table entry

		while (1) do
	
			if ([i+1] == "01" || [i+1] == "11") then               // if in memory page
		
				if([i+1] == "11") then
					[i+1] = "01";
				else
					if([MEM_LIST + [i]] < 2 && i != PTBR + 6) then  //if not a shared page and not a stack, swap
						
						j = 448;
						flag = 0;
						while(j < 512) do
							if ([DISK_LIST + j] == 0) then
								flag = j;
								break;
							endif;
							j = j+1;
						endwhile;
		
						if(flag == 0) then
							print "Out memory";
							[physicalSP + 1] = 10;    //system call number for exit
							SP = SP + 2;
							inline "JMP 11776";
						endif;
		
						store ([i],j);                             //moving page out
						[DISK_LIST + j] = [DISK_LIST + j] + 1;     //incrementing DISK_LIST 
						
						pg_num = [i];                               //storing page number in a register
						[i] = j;                                   //updating page tables of victim page
						[i + 1] = "00";
		
						break;
					endif;
				endif;
			endif;
		
			i = i + 2;
			if(i >= PAGE_TABLE + 256) then
				i = PAGE_TABLE;
			endif;
	
		endwhile;

	endif;

	store (6,20);                     //committing back DF list
	
	childPTBR = PAGE_TABLE + 8 * PCBi;	
	childPCB = READY_LIST + 32 * PCBi;	
	currentPCB = READY_LIST + 32 * currentPID;

	currentStack = [PTBR + 6];               // storing current stack page 



	[MEM_LIST + pg_num] = 1;                    //setting the new page as used


	i = 0;                                    //copying stack word by word
	while (i < 512) do
		[pg_num * 512 + i] = [currentStack * 512 + i];
		i = i+1;
	endwhile;

	[childPTBR + 6] = pg_num;                   // Setting child page table for stack
	[childPTBR + 7] = "01";


	//breakpoint;

	i = 0;

	while (i < 6) do

		j = i + 1;

		[childPTBR + i] = [PTBR + i];
		[childPTBR + j] = [PTBR + j];
	
		if ([PTBR + j] == "01" || [PTBR + j] == "11") then            // if a valid page
	
			[MEM_LIST + [PTBR + i]] = [MEM_LIST + [PTBR + i]] + 1;     //incrementing MEM_LIST value
	
		else
			if ([PTBR + i] >= 448) then                                    //if in swap area
				[DISK_LIST + [PTBR + i]] = [DISK_LIST + [PTBR + i]] + 1;   //incrementing DISK_LIST value
			endif;

		endif;

		i = i + 2;

	endwhile;

	store (6,20);                               //committing back DF list

	//breakpoint;

	// Populating PCB of child process

	[childPCB + 2] = BP;
	[childPCB + 3] = SP - 1;                     // setiting SP for child process
	[childPCB + 4] = [physicalSP];                // copying logical IP from top of the stack
	[childPCB + 5] = childPTBR;                  // copying PTBR from parent PCB
	[childPCB + 6] = PTLR;
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	[childPCB + 31] = currentPID;

	i = 0;

	while (i < 8) do

		[childPCB + 15 + 2*i] = [currentPCB + 15 + 2*i];
		[childPCB + 16 + 2*i] = [currentPCB + 16 + 2*i];

		j = [childPCB + 15 + 2*i];

		if(j != -1) then

			[FILE_TABLE + 2*j + 1] = [FILE_TABLE + 2*j + 1] + 1;        //incrementing file count
			[LTABLE + 2 * [childPCB + 16 + 2*i] + 1 ] = [LTABLE + 2 * [childPCB + 16 + 2*i] + 1 ] + 1;

		endif;

		i = i+1;
	endwhile;

	[childPCB + 1] = 1;            // child is ready

	[physicalSP - 2] = PCBi;                  // success
		
	i = SP - 1;        // i is SP of child
	j = ([childPTBR + 2 * (i / 512)] * 512) + (i % 512);         // calculating physicalSP of child

	[j-1] = -2;        // Setting return value  of child = -2

	
	//print "exf";
	//print PCBi;
	//breakpoint;

	ireturn;

endif;
		










	
