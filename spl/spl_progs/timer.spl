define PAGE_TABLE 1536;
define READY_LIST 31232;

alias currPID S0;
currPID = (PTBR - PAGE_TABLE) / 8;


alias currPCB S1;
currPCB = READY_LIST + 32 * currPID;

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

alias i S15;
alias currstack S14;

currstack = [PTBR + 6];

[ currPCB + 1 ] = 1; // Set STATE to READY
[ currPCB + 2 ] = BP;
[ currPCB + 3 ] = SP - 1;



[ currPCB + 4 ] = [ physicalSP ]; 

[ currPCB + 5 ] = PTBR;
[ currPCB + 6 ] = PTLR;

[ currPCB + 7 ] = R0; 
[ currPCB + 8 ] = R1; 
[ currPCB + 9 ] = R2; 
[ currPCB + 10 ] = R3; 
[ currPCB + 11 ] = R4; 
[ currPCB + 12 ] = R5; 
[ currPCB + 13 ] = R6; 
[ currPCB + 14 ] = R7;

alias newPCB S3;
alias newPID S4;



newPID = currPID;

while (1) do
	newPID = newPID + 1;
	if(newPID == 48) then
		newPID = 0;
	endif;

	newPCB = READY_LIST + 32 * newPID;
	if( [newPCB + 1] == 1) then 
		break;
	endif;

endwhile;

if ([ [newPCB + 5] + 7] == "00") then            //if new process stack not in memory swap with current process stack

	load (1,[ [newPCB + 5] + 6]);
	store (currstack,[ [newPCB + 5] + 6]);

	i = 0;
	while ( i < 512) do

		[ currstack*512 + i] = [SCRATCHPAD + i];
		i = i+1;

	endwhile;

	[PTBR + 6] = [[newPCB + 5] + 6];
	[PTBR + 7] = "00";

	[[newPCB + 5] + 6] = currstack;
	[[newPCB + 5] + 7] = "01";

	store (6,20);                               //committing back disk free list            
	

endif;


R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

BP = [newPCB + 2];
SP = [newPCB + 3];

PTBR = [newPCB + 5];
PTLR = [newPCB + 6];


SP = SP + 1;
alias newphysicalSP S10;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ];

[newPCB + 1] = 2;

ireturn;

