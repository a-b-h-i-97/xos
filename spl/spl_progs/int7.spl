alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currPID S2;
currPID = (PTBR - PAGE_TABLE) / 8;


alias currPCB S3;
currPCB = READY_LIST + 32 * currPID;

alias newPID S4;
alias newPCB S5;

alias swoft_ind S6;

alias i S15;


alias j S14;
j = 0;

alias flag S13;
flag = 0;


if(sysCallNo == 10) then

	newPID = currPID;
	i = 0;

	while (i < 32) do
		newPID = newPID + 1;
		if(newPID == 32) then
			newPID = 0;
		endif;
	
		newPCB = READY_LIST + 32 * newPID;
		if( [newPCB + 1] == 1) then 
			flag = 1;
			break;
		endif;

		i = i+1;
	
	endwhile;

	//breakpoint;

	if (flag == 0) then

		//print "last exit";
		halt;
	endif;


 	i = 0;

	while (i < 8) do

		swoft_ind = currPCB + 15 + 2*i;

		if ([swoft_ind] != -1) then

			j = FILE_TABLE + 2 * [swoft_ind] + 1;  // decrementing file count
			[j] = [j] - 1;

			if ([j] == 0) then                     // if file open count is 0 entry is invalid
				[j - 1] = -1;
			endif;

			[swoft_ind] = -1;
			[swoft_ind + 1] = -1;
		endif;

	    i = i+1;

	endwhile;

	//breakpoint;

	[currPCB + 1] = 0;                             // current process is terminated



	i = 0;
	
	while (i < 6) do                            // Freeing pages used by old process

		j = i + 1;

		if ([PTBR + j] == "01" || [PTBR + j] == "11") then            // if a valid page
	
			[MEM_LIST + [PTBR + i]] = [MEM_LIST + [PTBR + i]] - 1;     //decrementing MEM_LIST value
	
		else
			if ([PTBR + i] >= 448) then                                    //if in swap area
				[DISK_LIST + [PTBR + i]] = [DISK_LIST + [PTBR + i]] - 1;   //decrementing DISK_LIST value
			endif;

		endif;

		i = i + 2;

	endwhile;

	store (6,20);                               //committing back DF list

	[MEM_LIST + [PTBR + 6]] = [MEM_LIST + [PTBR + 6]] - 1;    // freeing the stack page
	[PTBR + 6] = -1;
	[PTBR + 7] = "00";	

	//breakpoint;


	R0 = [newPCB + 7];
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];
	
	BP = [newPCB + 2];
	SP = [newPCB + 3];
	
	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];

	SP = SP + 1;
	
	alias newphysicalSP S10;
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[ newphysicalSP ] = [ newPCB + 4 ];
	
	[newPCB + 1] = 2;                    //set the process as running

	//breakpoint;
	
	ireturn;

endif;


