alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias arg1 S2;                               
arg1 = [physicalSP - 3];

alias currentPID S3;
currentPID = (PTBR - 1024) / 8;

alias file S4;
alias fat_ind S5;
alias b_block S6;

alias curr_blocks S7;
alias new_blocks S8;

alias swoft_ind S9;

alias currentPCB S10;
currentPCB = READY_LIST + 32 * currentPID;

alias i S15;

//print "in exec";
//print currentPID;
//breakpoint;


alias j S14;
j = 0;

alias flag S13;
flag = 0;


if( sysCallNo == 9) then

	i = 0;
	fat_ind = -1;
	b_block = -1;

	while(i < 64) do

		file = [FAT + 8 * i];
		
		if(file == arg1) then
			fat_ind = i;
			break;
		endif;

		i = i+1;

	endwhile;

	if(fat_ind == -1) then

		[physicalSP - 2] = -1;                   //file not found
		print "file not found";
		ireturn;

	endif;

	b_block = [FAT + 8 * fat_ind + 2];

	load (1,b_block);

	i = 0;
	
	while (i < 6) do                            // Freeing pages used by old process

		j = i + 1;

		if ([PTBR + j] == "01" || [PTBR + j] == "11") then            // if a valid page
	
			[MEM_LIST + [PTBR + i]] = [MEM_LIST + [PTBR + i]] - 1;     //decrementing MEM_LIST value
	
		else
			if ([PTBR + i] >= 448) then                                    //if in swap area
				[DISK_LIST + [PTBR + i]] = [DISK_LIST + [PTBR + i]] - 1;   //decrementing DISK_LIST value
			endif;

		endif;

		i = i + 2;

	endwhile;

	store (6,20);                               //committing back DF list


	//breakpoint;


	i = 0;
	
	while (i < 3) do                          //Setting up page tables for new process

		if([SCRATCHPAD + i] != -1) then
			[PTBR + 2*i] = [SCRATCHPAD + i];
			[PTBR + 2*i + 1] = "00";
		else
			break;
		endif;

		i = i+1;

	endwhile;

	while (i < 3) do                          //Setting the remaining page table entries to -1
		[PTBR + 2*i] = -1;
		[PTBR + 2*i + 1] = "00";
		i = i+1;
	endwhile;

	[PTBR + 7] = "01";                       //Stack is set as unreferenced and valid
										     //stack frame of the earlier process is  reused


	//breakpoint;

	i = 0;

	while (i < 8) do

		swoft_ind = currentPCB + 15 + 2*i;

		if ([swoft_ind] != -1) then

			j = FILE_TABLE + 2 * [swoft_ind] + 1;  // decrementing file count
			[j] = [j] - 1;

			if ([j] == 0) then                     // if file open count is 0 entry is invalid
				[j - 1] = -1;
			endif;

			[swoft_ind] = -1;
			[swoft_ind + 1] = -1;
		endif;

	    i = i+1;

	endwhile;

	SP = 3 * 512;

	physicalSP = [PTBR + 6] * 512;                 // physical address of the stack

	[physicalSP] = 0;

	//print "exet";
	//breakpoint;

	ireturn;

endif;














