define PAGE_TABLE 1536;
define READY_LIST 31232;

load (7,1);               //Loading the Exception handler
load (8,2);

load (5,19);              //Loading FAT
load (6,20);              //Loading Disk Free List

load (9,3);               //Loading the Timer routine
load (10,4);

load (11,5);              //Loading Interrupt 1 routine          
load (12,6);

load (13,7);			  //Loading Interrupt 2 routine
load (14,8);

load (15,9);              //Loading Interrupt 3 routine
load (16,10);

load (17,11);             //Loading Interrupt 4 routine
load (18,12);

load (19,13);             //Loading Interrupt 5 routine
load (20,14);

load (21,15);             //Loading Interrupt 6 routine
load (22,16);

load (23,17);             //Loading INterrupt 7 routine
load (24,18);


// Setting up System Wide Open File Table

alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;


// Setting up Memory Free List using pages upto 24

counter = 0;

while (counter <= 24) do                
	[MEM_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while (counter < 64) do
	[MEM_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

// New location for PCB for 48 processes

[MEM_LIST + 61] = 1;
[MEM_LIST + 62] = 1;
[MEM_LIST + 63] = 1;



// Setting all PCB states to 0

counter = 0;

while (counter < 48) do
	[READY_LIST + counter * 32 + 1] = 0;
	counter = counter + 1;
endwhile;


// Marking SWAP area as unused in DISK_LIST

counter = 448;
while (counter < 512) do
	[DISK_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

store (6,20);          //commiting disk free list back to the disk



//Setting up per-process file table for init

counter = 15;

while (counter <= 30) do
	[READY_LIST + counter] = -1;
	counter = counter + 1;
endwhile;


[READY_LIST + 0] = 0;     // PID for init is zero
[READY_LIST + 31] = 0;    //parent of init is 0

PTBR = PAGE_TABLE;        //Setting up page tables for init
PTLR = 4;
[PTBR + 0] = 21;          //21,22 and 23 are code blocks for init in disk
[PTBR + 1] = "00";
[PTBR + 2] = 22;
[PTBR + 3] = "00";
[PTBR + 4] = 23;
[PTBR + 5] = "00";
[PTBR + 6] = 25;          //assigning page 25 for init stack
[PTBR + 7] = "01";

[MEM_LIST + 25] = 1;     //marking page 25 as used

[READY_LIST + 1] = 2;    //Set state of init to running

SP = 3*512;

[25 * 512] = 0;          //Placing 0 in the top of the stack

ireturn;