alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias arg1 S2;
arg1 = [physicalSP - 3];

alias file S3;

alias free_block S4;
free_block = -1;

alias free_FAT S5;
free_FAT = -1;

alias fat_ind S6;
alias b_block S7;

alias i S15;
i = 0;

alias flag S14;
flag = 0;

alias j S13;
j = 0;

alias k S12;
j = 0;




if (sysCallNo == 1) then

	while (i < 64) do
	
		file = [FAT + 8 * i];
		if(file == arg1) then
			[physicalSP - 2] = 0;                   //Success return value file already exists
			ireturn;
		endif;
		i = i+1;

	endwhile;

	i = 0;
	while(i <= 447) do

		if( [DISK_LIST + i] == 0) then
			free_block = i;
			break;
		endif;
		i = i+1;
	endwhile;

	if(free_block == -1) then

		[physicalSP - 2] = -1;                      //Failure return value; no free block in disk
		ireturn;
	endif;


	i = 0;
	while(i < 64) do

		if( [FAT + (8 * i) + 2] == -1) then
			free_FAT  = i;
			break;
		endif;
		i = i+1;

	endwhile;

	if(free_FAT == -1) then
		[physicalSP - 2] = -1;                      //Failure return value; no free FAT entry
		ireturn;
	endif;

	[FAT + 8 * free_FAT] = arg1;                    //Add filename to FAT entry
	[FAT + 8 * free_FAT + 1] = 0;                   //size in FAT entry initialized to 0
	[FAT + 8 * free_FAT + 2] = free_block;          //add basic block to FAT entry

	[DISK_LIST + free_block] = 1;                   //updating disk free list


	load (1,free_block);                            //Load basic block to memory
	i = SCRATCHPAD;

	while(i < SCRATCHPAD + 512) do
		[i] = -1;                                   // Witing -1 to all words in page 1
		i = i+1;
	endwhile;

	store (1,free_block);                           // Write back basic block to disk
	store (5,19);                                   // Write back FAT
	store (6,20);                                   // Write back Disk Free List


	[physicalSP - 2] = 0;                           // Success return value
	ireturn;

endif;


if (sysCallNo == 4) then

	i = 0;
	flag = 0;

	while (i < 64) do
	
		file = [FAT + 8 * i];
		if(file == arg1) then
			fat_ind = i;
			flag = 1;
			break;
		endif;
		i = i+1;

	endwhile;

	if (flag == 0) then
		[physicalSP - 2] = -1;                        //File does not exist
		print "no file";
		ireturn;
	endif;

	i = 0;
	flag = 0;

	while (i < 64) do                                 //searching the swoft

		if([FILE_TABLE + 2*i] == fat_ind) then
			flag = 1;
			break;
		endif;
		i = i+1;
	endwhile;

	if(flag == 1) then
		[physicalSP - 2] = -1;                        //File is open
		print "open file";
		ireturn;
	endif;

	b_block = [FAT + 8 * fat_ind + 2];
	
	if (b_block == -1) then
		[physicalSP - 2] = -1;                        //b_block =-1
		print "invalid b_block";
		ireturn;
	endif;
	
	i = 0;
	while(i < 256) do

		load (1,b_block);                            //1 is SCRATCHPAD/512

		j = [SCRATCHPAD + i];

		if (j >= 24 && j <= 447) then

			load (1,j);                              //loading ith data block
			k = 0;

			while (k < 512) do

				[SCRATCHPAD + k] = "";
				k = k+1;

			endwhile;

			store(1,j);                             //storing back the ith data block
			[DISK_LIST + j] = 0;                    //updating df list

		endif;

		i = i + 1;

	endwhile;

	i = 0;
	load (1,b_block);

	while(i < 256) do
		[SCRATCHPAD + i] = "";
		i = i+1;
	endwhile;

	store(1,b_block);
	[DISK_LIST + b_block] = 0;
	
	store(6,20);                                     //storing back DF

	[FAT + 8*fat_ind] = -1;                          //set the filename and basic block to -1  and size to zero
	[FAT + 8*fat_ind + 1] = 0;
	[FAT + 8*fat_ind + 2] = -1;                               

	store(5,19);                                     //storing back FAT

	[physicalSP - 2] = 0;

	ireturn;

endif;


	
	